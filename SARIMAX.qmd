### Politics

We add 3 politics to the dataset :
 - Borders main UE Period
 - Border non-UE Period
 - Negative tests Period

We add them as dummies over the same period of our time series. We put a 1 when the policy is applied, and 0 when it is not. We did it by hand on Excel, it was simplier than with R.


```{r, warning=FALSE}
library(dplyr)

# Importing our dataset containing the poolicies and the number of passengers
airports_politics <- openxlsx::read.xlsx(xlsxFile="datasets/DATA_POLITICS.xlsx")

# Creating one dataframe for policies and one for airports
col_start <- which(names(airports_politics) == "2002-01")
col_end <- which(names(airports_politics) == "2023-09")

airports <- airports_politics %>% dplyr::select(1, col_start : col_end)
politics <- airports_politics %>% dplyr::select(1, (col_end+1):length(airports_politics))


# Splitting the dataframe policies to get one for each policy
# We need the split to pivot each one separatly and then merge them back

# a - Borders main EU period
col_start_a <- which(names(airports_politics) == "2002-01.a")
col_end_a <- which(names(airports_politics) == "2023-09.a")

policy_a <- airports_politics %>% dplyr::select(1, col_start_a : col_end_a)

# b - Borders non-EU period
col_start_b <- which(names(airports_politics) == "2002-01.b")
col_end_b <- which(names(airports_politics) == "2023-09.b")

policy_b <- airports_politics %>% dplyr::select(1, col_start_b : col_end_b)

# c - Negative tests period
col_start_c <- which(names(airports_politics) == "2002-01.c")
col_end_c <- which(names(airports_politics) == "2023-09.c")

policy_c <- airports_politics %>% dplyr::select(1, col_start_c : col_end_c)
```

```{r}
# Pivoting the dataframes
airports <- tidyr::pivot_longer(airports, cols = -c("Airport"), names_to = "Date", values_to = "Passenger")
policy_a <- tidyr::pivot_longer(policy_a, cols = -c("Airport"), names_to = "Date", values_to = "Borders main EU period")
policy_b <- tidyr::pivot_longer(policy_b, cols = -c("Airport"), names_to = "Date", values_to = "Borders non-EU period")
policy_c <- tidyr::pivot_longer(policy_c, cols = -c("Airport"), names_to = "Date", values_to = "Negative tests period")


# Modifying the name of the date column
policy_a$Date <- gsub("\\.a$", "", policy_a$Date)
policy_b$Date <- gsub("\\.b$", "", policy_b$Date)
policy_c$Date <- gsub("\\.c$", "", policy_c$Date)
```

```{r}
# Merging the four dataframes to get the final one at the good format
politics_formate <- merge(airports, policy_a, by = c("Airport", "Date"), all.x = TRUE)
politics_formate <- merge(politics_formate, policy_b, by = c("Airport", "Date"), all.x = TRUE)
politics_formate <- merge(politics_formate, policy_c, by = c("Airport", "Date"), all.x = TRUE)
```

```{r}
# Merging
airports_politics_formate <- merge(airports, policy_a, by = c("Airport", "Date"), all.x = TRUE)
airports_politics_formate <- merge(airports_politics_formate, policy_b, by = c("Airport", "Date"), all.x = TRUE)
airports_politics_formate <- merge(airports_politics_formate, policy_c, by = c("Airport", "Date"), all.x = TRUE)

# Changing the date format
airports_politics_formate$Date <- zoo::as.Date(paste0(airports_politics_formate$Date, "-01"), format="%Y-%m-%d")

# Keeping only the data from January 2002 to  May 2023
airports_politics_formate <- airports_politics_formate[airports_politics_formate$Date <= as.Date("2023-05-01"),]
```


```{r}
# Copenhagen
copenhagen <- airports_politics_formate %>% dplyr::filter(Airport == "KOBENHAVN/KASTRUP airport")
# Madrid
madrid <- airports_politics_formate %>% dplyr::filter(Airport == "ADOLFO SUAREZ MADRID-BARAJAS airport")
# Oslo
oslo <- airports_politics_formate %>% dplyr::filter(Airport == "OSLO/GARDERMOEN airport")
# Paris
paris <- airports_politics_formate %>% dplyr::filter(Airport == "ADOLFO SUAREZ MADRID-BARAJAS airport")
# Roma
roma <- airports_politics_formate %>% dplyr::filter(Airport == "ROMA/FIUMICINO airport")
```

## SARIMAX


#### Integrating the politics to our SARIMA model for CDG

```{r}
library(forecast)

## Dataframe for Paris policies ##

# Actual data
paris <- paris[paris$Date<=as.Date("2023-05-01"),]
paris$CovidDummy <- ifelse(paris$Date >= as.Date("2020-12-01"), 1, 0)
paris_ts <- ts(paris$Passenger, start=c(2002, 1), end=c(2023, 5), frequency=12)
paris_covid <- paris$CovidDummy

# Data for fitting the model
paris_20 <- paris[paris$Date<=as.Date("2020-12-01"),]
paris_20_ts <- ts(paris_20$Passenger, start=c(2002, 1), end=c(2020, 12), frequency=12)
paris_20_covid <- paris_20$CovidDummy
```


#### Prediction

```{r}
# Model
sarimax_paris <- auto.arima(paris_ts, xreg=paris_covid, seasonal=TRUE, stepwise = FALSE, approximation = FALSE)
sarima_paris <- Arima(paris_ts, order=c(0,1,1), seasonal=list(order=c(0,1,1), period=12))

#sarimax_model <- Arima(charles_ts, order=c(0,1,1), seasonal=list(order=c(0,1,1), period=12), xreg=paris_covid)
```

```{r}
# Forecast the next 31 periods
forecasted_values_sarimax <- forecast::forecast(sarimax_paris, h=31, xreg=paris$CovidDummy)
forecasted_values_sarima <- forecast::forecast(sarima_paris, h=31)
```

```{r}

# For actual data: Create a tibble/data frame with time and actual values
actual_data <- tibble(
  time = as.Date(time(paris_ts)),
  Value = as.vector(paris_ts),
  Type = 'Actual'
)

# For forecasted data: Create a tibble/data frame with forecasted times and values

# SARIMAX
forecast_data_sarimax <- tibble(
  time = as.Date(time(forecasted_values_sarimax$mean)),
  Value = as.vector(forecasted_values_sarimax$mean),
  Type = 'Forecast SARIMAX'
)

# SARIMA
forecast_data_sarima <- tibble(
  time = as.Date(time(forecasted_values_sarima$mean)),
  Value = as.vector(forecasted_values_sarima$mean),
  Type = 'Forecast SARIMA'
)

# Combine actual and forecasted data
combined_data <- bind_rows(actual_data, forecast_data_sarimax, forecast_data_sarima)

# Plot using ggplot2
ggplot(data = combined_data, aes(x = time, y = Value, color = Type)) +
  geom_line() +
  labs(title = "Charles de Gaulles passenger traffic forecast", x = "Time", y = "Value") +
  theme_minimal()

```

```{r}
autoplot(forecasted_values) + autolayer(charles_ts)
```